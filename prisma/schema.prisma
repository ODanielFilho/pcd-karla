generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String?
  email        String   @unique
  passwordHash String?  @map("password_hash")
  avatarUrl    String?  @map("avatar_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  role              UserRole      @default(CANDIDATE)
  jobs              Job[]         @relation("CompanyJobs")
  applications      Application[]
  tokens            Token[]       @relation("UserTokens")
  News              News[]
  Trainning         Trainning[]
  TrainningStudents Trainning[]   @relation("TrainningStudents")
  Classroom         Classroom[]
  Lesson            Lesson[]
  Module            Module[]

  @@map("users")
}

model Job {
  id           String        @id @default(uuid())
  title        String
  description  String
  companyId    String
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  slug         String        @unique
  company      User          @relation("CompanyJobs", fields: [companyId], references: [id])
  applications Application[]

  @@map("jobs")
}

model Application {
  id        String   @id @default(uuid())
  userId    String
  jobId     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])
  job  Job  @relation(fields: [jobId], references: [id])

  @@map("applications")
}

enum UserRole {
  ADMIN
  COMPANY
  CANDIDATE
  MEDIA
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserTokens")
  userId String @map("user_id")

  @@map("tokens")
}

enum TokenType {
  PASSWORD_RECOVER
}

model News {
  id          String   @id @default(uuid())
  title       String
  content     String
  imageUrl    String?
  publisherId String
  publisher   User     @relation(fields: [publisherId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("news")
}

model Trainning {
  id             Int         @id @default(autoincrement())
  title          String
  imageUrl       String?
  format         String
  duraction      String
  timeconclusion String
  intended       String
  certificate    String
  location       String
  date           DateTime
  teacherLink    String
  objective      String
  about          String
  aboutHeader    String?
  trail          String[]
  like           Boolean?
  content        String
  students       User[]      @relation("TrainningStudents")
  teacher        User        @relation(fields: [teacherId], references: [id])
  teacherId      String      @map("teacher_id")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  Module         Module[]
  lessons        Lesson[]
  Classroom      Classroom[]

  @@map("trainnings")
}

model Module {
  id          Int       @id @default(autoincrement())
  title       String
  trainningId Int
  teacher     User      @relation(fields: [teacherId], references: [id])
  teacherId   String    @map("teacher_id")
  trainning   Trainning @relation(fields: [trainningId], references: [id])
  lessons     Lesson[]

  @@map("modules")
}

model Lesson {
  id          Int       @id @default(autoincrement())
  title       String
  link        String
  description String
  teacher     User      @relation(fields: [teacherId], references: [id])
  teacherId   String    @map("teacher_id")
  trainningId Int
  trainning   Trainning @relation(fields: [trainningId], references: [id])
  moduleId    Int       @map("module_id")
  module      Module    @relation(fields: [moduleId], references: [id])

  @@map("lessons")
}

model Classroom {
  id          Int       @id @default(autoincrement())
  studentId   String
  trainningId Int
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  user        User      @relation(fields: [studentId], references: [id])
  trainning   Trainning @relation(fields: [trainningId], references: [id], onDelete: Cascade)

  @@map("classrooms")
}
